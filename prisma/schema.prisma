// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String    @id @default(cuid())
  address       String    @unique // Ethereum address is unique
  username      String?
  bio           String?
  avatarUrl     String?
  twitterUrl    String?
  websiteUrl    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  collections   Collection[]
  nfts          NFT[]
  likes         Like[]
  comments      Comment[]
}

model Collection {
  id            String    @id @default(cuid())
  name          String
  symbol        String
  description   String?
  logoUrl       String?
  bannerUrl     String?
  contractAddress String?  @unique
  metadataUrl   String?
  chainId       Int
  verified      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  creator       User      @relation(fields: [creatorId], references: [id])
  creatorId     String
  nfts          NFT[]
}

model NFT {
  id            String    @id @default(cuid())
  name          String
  description   String?
  imageUrl      String
  metadataUrl   String
  tokenId       String?
  supply        Int       @default(1)
  price         String?
  currency      String    @default("ETH")
  listed        Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  creator       User      @relation(fields: [creatorId], references: [id])
  creatorId     String
  collection    Collection @relation(fields: [collectionId], references: [id])
  collectionId  String
  owner         String?   // Current owner's address
  likes         Like[]
  comments      Comment[]
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Relationships
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  nft       NFT      @relation(fields: [nftId], references: [id])
  nftId     String

  @@unique([userId, nftId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  nft       NFT      @relation(fields: [nftId], references: [id])
  nftId     String
}

model Listing {
  id            String        @id @default(cuid())
  price         Float
  quantity      Int
  status        String        @default("active") // active, sold, cancelled
  nft           NFT          @relation(fields: [nftId], references: [id])
  nftId         String
  seller        User         @relation(fields: [sellerId], references: [id])
  sellerId      String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Follows {
  follower      User         @relation("follower", fields: [followerId], references: [id])
  followerId    String
  following     User         @relation("following", fields: [followingId], references: [id])
  followingId   String
  createdAt     DateTime     @default(now())

  @@id([followerId, followingId])
}

