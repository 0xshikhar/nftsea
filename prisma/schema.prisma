// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String         @id @default(cuid())
  address       String         @unique
  username      String?        @unique
  bio           String?
  avatar        String?
  collections   Collection[]
  nfts          NFT[]
  listings      Listing[]
  likes         Like[]
  comments      Comment[]
  followers     Follows[]      @relation("following")
  following     Follows[]      @relation("follower")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Collection {
  id            String         @id @default(cuid())
  name          String
  symbol        String
  description   String?
  logo          String
  chainId       Int
  contractAddress String?
  isVerified    Boolean       @default(false)
  creator       User          @relation(fields: [creatorId], references: [id])
  creatorId     String
  nfts          NFT[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model NFT {
  id            String        @id @default(cuid())
  tokenId       Int?
  name          String
  description   String?
  image         String
  supply        Int          @default(1)
  traits        Json?
  externalLink  String?
  collection    Collection    @relation(fields: [collectionId], references: [id])
  collectionId  String
  creator       User         @relation(fields: [creatorId], references: [id])
  creatorId     String
  listings      Listing[]
  likes         Like[]
  comments      Comment[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Listing {
  id            String        @id @default(cuid())
  price         Float
  quantity      Int
  status        String        @default("active") // active, sold, cancelled
  nft           NFT          @relation(fields: [nftId], references: [id])
  nftId         String
  seller        User         @relation(fields: [sellerId], references: [id])
  sellerId      String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Like {
  id            String        @id @default(cuid())
  user          User         @relation(fields: [userId], references: [id])
  userId        String
  nft           NFT          @relation(fields: [nftId], references: [id])
  nftId         String
  createdAt     DateTime     @default(now())

  @@unique([userId, nftId])
}

model Comment {
  id            String        @id @default(cuid())
  content       String
  user          User         @relation(fields: [userId], references: [id])
  userId        String
  nft           NFT          @relation(fields: [nftId], references: [id])
  nftId         String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Follows {
  follower      User         @relation("follower", fields: [followerId], references: [id])
  followerId    String
  following     User         @relation("following", fields: [followingId], references: [id])
  followingId   String
  createdAt     DateTime     @default(now())

  @@id([followerId, followingId])
}

